#----------------------------------------------#
#            Solar Power Forecasting           #
#----------------------------------------------#


#----------------------#
# Import the libraries #
#----------------------#


#install.packages('readxl','forecast','timeSeries','zoo','ggplot2','lubridate','ggcorrplot')
library(readxl)
library(forecast)
library(timeSeries)
library(zoo)
library(ggplot2)
library(lubridate)
library(ggcorrplot)


#-------------#
# Import Data #
#-------------#
data <- read_excel("PowerData.xlsx")


#------------------#
# Data Preparation #
#------------------#


#Converting data to ts and EDA
#Weekly data, so frequency = #Days per year/7


# Convert to TS


# Cloud Cover
data_ts_cc <- ts(data$Cloud_Cover, start = c(2014,41), end = c(2015,30), freq = 52)
# Generated Power
data_ts_kw <- ts(data$kW_Gen, start = c(2014,41), end = c(2015,30), freq = 52)


#------------------#
# Data Exploration #
#------------------#


# Find the relation between Generated Power & Cloud Cover
cor(data$kW_Gen,data$Cloud_Cover)


# Making plots for each of the variables
plot(data_ts_cc,ylab="Cloud Cover",col="navyblue") #Evident Trend


plot(data_ts_kw,ylab="kW",col="darkOrange")


# Make ACF & PACF plots of Cloud Cover
Acf(data_ts_cc,main="ACF of Cloud Cover")
Pacf(data_ts_cc,main="PACF of Cloud Cover")


################### Stationary Series ##########################


# Make linear model with Linear Trend
cc_lm <- tslm(data_ts_cc ~ trend)


# Make linear model with Quadratic Trend
cc_qm <- tslm(data_ts_cc ~ trend + I(trend ^ 2))


# Plot the fitted values for each of the models
plot(data_ts_cc,lty=1,type="l",col="navyblue",main="Cloud Cover - Model Comparison",ylab="Cloud Cover")
lines(cc_lm$fitted.values,col="orange",lty=2)
lines(cc_qm$fitted.values,col="red",lty=1)


# Add a legend
legend(2014.845, 4, legend=c("Actual","Linear","Quadratic"),
       col=c("navyblue","orange", "red"), lty=c(1,2,1),cex=0.6,ncol=2)


############# Looks like Quadratic Trend fits the model best ##################


# The series has no seasonality, but has trend.


#Forecasting cloud cover


#------------------#
# Data Partition   #
#------------------#
train_ts <- window(data_ts_cc,start=c(2014,41), end = c(2015,20))
valid_ts <- window(data_ts_cc,start=c(2015,21), end = c(2015,30))


#---------------#
# Naive Model   #
#---------------#
# Forecast with Naive Model
naive_fcst <- naive(train_ts,h=length(valid_ts))


#-------------------------#
# Quadratic Trend Model   #
#-------------------------#
qm_model <- tslm(train_ts~trend+I(trend^2))
# Forecast with Quadratic Model
qm_fcst <- forecast(qm_model)


#--------------------------------#
# Double Exponential Smoothing   #
#--------------------------------#
dexp_model <- ets(train_ts,model="ZZZ")
# Forecast with ANN Model
dexp_fcst <- forecast(dexp_model,h=length(valid_ts))


#---------#
# ARIMA   #
#---------#
arima_model <- auto.arima(train_ts)
# Forecast with ARIMA Model
arima_fcst <- forecast(arima_model,h=length(valid_ts))


#--------------------#
# Model Validation   #
#--------------------#
accuracy(naive_fcst,valid_ts) #Naive Model
accuracy(qm_fcst,valid_ts) # Quadratic Trend Model
accuracy(dexp_fcst,valid_ts) # Double Exponential Smoothing
accuracy(arima_fcst,valid_ts) #ARIMA


#Plotting all models together
par(mfrow=c(1,1))
plot(train_ts, ylim = c(0,8),xlim = c(2014.75,2015.6))
arrows(2014.75, 7,2015.38 , 7, code = 3, length = 0.1, lwd = 1,angle = 30)
text(2015.1,7.5,"Training")
lines(valid_ts,xlim=c(2015.38,2015.6))
arrows(2015.38,7,2015.6 ,7, code = 3, length = 0.1, lwd = 1,angle = 30)
text(2015.5,7.5,"Validation")


# Naive
lines(naive_fcst$fitted,xlim = c(2014.75,2015.38),col="Orange",lty=1)
lines(naive_fcst$mean,xlim = c(2015.38,2015.6),col="Orange",lty=2)


# Quadratic
lines(qm_fcst$fitted,xlim = c(2014.75,2015.38),col="blue",lty=1)
lines(qm_fcst$mean,xlim = c(2015.38,2015.6),col="blue",lty=2)


# Double Exp
lines(dexp_fcst$fitted,xlim = c(2014.75,2015.38),col="red",lty=1)
lines(dexp_fcst$mean,xlim = c(2015.38,2015.6),col="red",lty=2)


####################### We will use the double exponential Model forecasts ########


#Making the double exponential model based on all the 42 week data points
dexp_model <- holt(data_ts_cc, h=10)
autoplot(dexp_model)


#Fit Linear regression for full date
reg_model <- lm(kW_Gen ~ Cloud_Cover , data = data)
summary(reg_model)


####################### Predict Kw till week 40 of 2015 ########
test_df1 <- as.data.frame(dexp_model)
colnames(test_df1) <- c("Cloud_Cover")
predict_kw1 <- as.data.frame(predict(reg_model, test_df1))
predict_kw_df1 <- data.frame(predict_kw1, c(2015.577, 2015.596, 2015.615, 2015.635, 2015.654, 2015.673, 2015.692, 2015.712, 2015.731, 2015.750))
colnames(predict_kw_df1) <- c("kW","Time")


plot(predict_kw_df1$Time, predict_kw_df1$kW, pch = 19, xlab = "Time", ylab = "kW generated")
lines()


test_df2 <- as.data.frame(dexp_model)
colnames(test_df2) <- c("1","2","3","Cloud_Cover","4")
predict_kw2 <- as.data.frame(predict(reg_model, test_df2))
predict_kw_df2 <- data.frame(predict_kw2, c(2015.577, 2015.596, 2015.615, 2015.635, 2015.654, 2015.673, 2015.692, 2015.712, 2015.731, 2015.750))
colnames(predict_kw_df2) <- c("kW","Time")


plot(predict_kw_df2$Time, predict_kw_df2$kW, pch = 19, xlab = "Time", ylab = "kW generated")


test_df3 <- as.data.frame(dexp_model)
colnames(test_df3) <- c("1","2","3","4","Cloud_Cover")
predict_kw3 <- as.data.frame(predict(reg_model, test_df3))
predict_kw_df3 <- data.frame(predict_kw3, c(2015.577, 2015.596, 2015.615, 2015.635, 2015.654, 2015.673, 2015.692, 2015.712, 2015.731, 2015.750))
colnames(predict_kw_df3) <- c("kW","Time")


plot(predict_kw_df3$Time, predict_kw_df3$kW, pch = 24, xlab = "Time", ylab = "kW generated")


par(mfrow=c(2,1))
plot(predict_kw_df1$Time, predict_kw_df1$kW, ylim = c(0.520, 0.527), pch = 4, xlab = "Time", ylab = "kW generated")
 
plot(predict_kw_df1$Time, predict_kw_df1$kW, ylim = c(0.2,0.8),pch = 4, xlab = "Time", ylab = "kW generated")
points(predict_kw_df2$Time, predict_kw_df2$kW, pch = 4, col = "red")
points(predict_kw_df3$Time, predict_kw_df3$kW, pch = 4, col = "red")


par(mfrow=c(1,1))
par(bg = "white")
plot(data_ts_kw, ylim = c(0.1,0.9), xlim = c(2014.75, 2015.75), pch = 4, xlab = "Time", ylab = "kW generated", bg = "blue", lw = 2)
points(predict_kw_df1$Time, predict_kw_df1$kW, pch = 4, col = "blue", cex = 1.1)
points(predict_kw_df2$Time, predict_kw_df2$kW, pch = 4, col = "red", cex = 1.1)
points(predict_kw_df3$Time, predict_kw_df3$kW, pch = 4, col = "red", cex = 1.1)


legend(2015.39, 0.45, legend=c("CI Bounds", "Predictions"),
       col=c("red", "blue"), lty=1:1, cex=0.8)












































